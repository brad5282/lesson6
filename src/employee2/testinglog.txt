Testing Theory
================

There are many goals to achieve when testing a program:

1) Complete Code Coverage
=========================
-Not every line of code in a program runs every time. the goal of complete code coverage is
to test enough times to ensure every line gets run at least once.

2) Testing Boundary Conditions
===============================
-Use data that falls right around the limits of certain boundaries
- ex: just below, just at and just above particular requirements found in loops and if statements


3) Testing Extreme Conditions
==============================
-Use data that falls very far outside3 the required limits
- ex: try paying an employee $1000/hr or 200 hrs of work 
-ensure that program responds appropriately to this data

4) Testing Efficiency
======================
-want to avoid using data sets that take us down identical paths of execution in the 
code. Once an area is tested we don't need further data that tests the same thing.
Equivalence Class - When two sets of data follow the same path in a program 
they belong to the same Equivalence class.
ex: type 1 employee, 50 hrs        Type 1 employee 48 hrs

Testing Log
============
test#                Description                    Expected               Result
======               ===========                    =========             ========
1(code Coverage)     Rate:10,type:1, hrs:30          300                    300
2(code Coverage)     Rate:10,type:1, hrs:50          400+200=600           600


3(boundary)         rate:10,type:1, hrs:39,40,41    OT only for 41          OT only for 41

4(Extreme)          R:10 ,T:1 ,H:0 and 168          Hours not set         hours not set, prevented user from using program

5(Boundary)         R:6.49, 6.5, 30.5, 30.51, T:1,H:10  Rate only set for #2,3    rate only set for #3     

6(Boundary)         R:10, T:2,H:0, 1, 60, 61     hours only set for #2,3         only when hours was set to #2,3 would it work

7(Boundary)         R:10, T:0,1,2,3, H:45  type only set for #2,3          only worked for type 1 & 2, with only type 1 receiving OT
                                              OT only for type 1, not 2